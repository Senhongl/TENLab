parallel_define Strassen {
    overload __*__ (x, y) {
        map f1 {
            l1 = shape(x);
            l2 = shape(y);
			x11 = x[0:l1[0]//2:1,0:l1[1]//2:1];
			x22 = x[l1[0]//2:l1[0]:1,l1[1]//2:l1[1]:1];
			y11 = y[0:l2[0]//2:1,0:l2[1]//2:1];
			y22 = y[l2[0]//2:l2[0]:1,l2[1]//2:l2[1]:1];
            return (x11+x22)*(y11+y22);
        }
        map f2 {
            l1 = shape(x);
            l2 = shape(y);
			x21 = x[l1[0]//2:l1[0]:1,0:l1[1]//2:1];
			x22 = x[l1[0]//2:l1[0]:1,l1[1]//2:l1[1]:1];
			y11 = y[0:l2[0]//2:1,0:l2[1]//2:1];
            return (x21+x22)*y11;
        }
        map f3 {
            l1 = shape(x);
            l2 = shape(y);
			x11 = x[0:l1[0]//2:1,0:l1[1]//2:1];
			y12 = y[0:l2[0]//2:1,l2[1]//2:l2[1]:1];
			y22 = y[l2[0]//2:l2[0]:1,l2[1]//2:l2[1]:1];
            return x11*(y12-y22);
        }
        map f4 {
            l1 = shape(x);
            l2 = shape(y);
			x22 = x[l1[0]//2:l1[0]:1,l1[1]//2:l1[1]:1];
			y11 = y[0:l2[0]//2:1,0:l2[1]//2:1];
			y21 = y[l2[0]//2:l2[0]:1,0:l2[1]//2:1];
            return x22*(y21-y11);
        }
        map f5 {
            l1 = shape(x);
            l2 = shape(y);
			x11 = x[0:l1[0]//2:1,0:l1[1]//2:1];
			y22 = y[l2[0]//2:l2[0]:1,l2[1]//2:l2[1]:1];
			x12 = x[0:l1[0]//2:1,l1[1]//2:l1[1]:1];
            return (x11+x12)*y22;
        }
        map f6 {
            l1 = shape(x);
            l2 = shape(y);
			x21 = x[l1[0]//2:l1[0]:1,0:l1[1]//2:1];
			y11 = y[0:l2[0]//2:1,0:l2[1]//2:1];
			x11 = x[0:l1[0]//2:1,0:l1[1]//2:1];
			y12 = y[0:l2[0]//2:1,l2[1]//2:l2[1]:1];
            return (x21-x11)*(y11+y12);
        }
        map f7 {
            l1 = shape(x);
            l2 = shape(y);
			x22 = x[l1[0]//2:l1[0]:1,l1[1]//2:l1[1]:1];
			y22 = y[l2[0]//2:l2[0]:1,l2[1]//2:l2[1]:1];
			y21 = y[l2[0]//2:l2[0]:1,0:l2[1]//2:1];
			x12 = x[0:l1[0]//2:1,l1[1]//2:l1[1]:1];
            return (x12-x22)*(y21+y22);
        }
        reduce {
            c11 = f1+f4-f5+f7;
            c12 = f3+f5;
            c21 = f2+f4;
            c22 = f1-f2+f3+f6;
            return cat(cat(c11,c12,0),cat(c21,c22,0),1);
        }
    }
}


a = zeros([4096, 4096]);
b = ones([4096, 4096]);
# using Strassen;
c = a*b;
print(c);








